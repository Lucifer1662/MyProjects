{"version":3,"sources":["components/List.js","components/Content.js","components/Project.js","components/Spacer.js","App.js","serviceWorker.js","index.js"],"names":["List","children","className","Content","header","description","src","Project","name","contents","gitHubLink","contentsComponents","map","content","index","href","Spacer","style","borderTop","width","height","marginTop","borderTopColor","borderTopStyle","resolveProjectPaths","json","directory","App","console","log","folderName","projectsFolderNames","projectNames","useState","projects","setProjects","retrievedProjects","setRetrievedProjects","a","async","Promise","all","project","fetch","response","projectJson","then","projectsReact","Fragment","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mfAIe,SAASA,EAAT,GAA0B,IAAXC,EAAU,EAAVA,SAC1B,OAAO,yBAAKC,UAAU,kBACjBD,G,MCDM,SAASE,EAAT,GAA6C,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAAaC,EAAK,EAALA,IAClD,OAAO,yBAAKJ,UAAU,qBAClBE,EAAQ,wBAAIF,UAAU,kBAAd,IAAiCE,EAAjC,KAAiD,KACzDC,EAAa,uBAAGH,UAAU,uBAAb,IAAqCG,EAArC,KAAyD,KACtEC,EAAK,yBAAKJ,UAAU,cAAcI,IAAKA,IAAW,M,MCJ3C,SAASC,EAAT,GAA+D,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,SAAUJ,EAA2B,EAA3BA,YAAaK,EAAc,EAAdA,WACvDC,EAAqB,KAMzB,OALIF,IACAE,EAAqBF,EAASG,KAC1B,SAACC,EAASC,GAAV,OAAoB,kBAACX,EAAYU,OAIrC,yBAAKX,UAAU,qBACX,uBAAGa,KAAML,GACT,wBAAIR,UAAU,kBAAd,IAAiCM,IAEjC,uBAAGN,UAAU,uBAAb,IAAqCG,GACrC,yBAAKH,UAAU,yBACVS,I,WChBF,SAASK,IACpB,OAAO,yBAAKC,MAAO,CACnBC,UAAW,EACXC,MAAM,MACNC,OAAQ,EACRC,UAAW,GACXC,eAAgB,OAChBC,eAAgB,WCgCpB,SAASC,EAAoBC,EAAMC,GACjCD,EAAKhB,SAAWgB,EAAKhB,SAASG,KAAI,SAACC,GAEjC,OADAA,EAAQP,IAAMoB,EAAYb,EAAQP,IAC3BO,KAiBIc,MAtDf,WACEC,QAAQC,IAAI,cACZD,QAAQC,IAAI,CAACC,WAAYC,IAFZ,IAyCkBC,EAAcN,EAzChC,EAGiBO,mBAAS,IAH1B,mBAGRC,EAHQ,KAGEC,EAHF,OAImCF,mBAAS,iBAJ5C,mBAIRG,EAJQ,KAIWC,EAJX,KAKbT,QAAQC,IAAI,CAAEK,SAAUA,EAAUE,kBAAmBA,IAE5B,iBAArBA,IACFC,EAAqB,eAiCQL,EAhCXD,EAgCyBL,EAhCJ,YAgC3C,EAAAY,EAAAC,OAAA,yEACSC,QAAQC,IAAIT,EAAapB,KAAI,SAAO8B,GAAP,iBAAAJ,EAAAC,OAAA,uDAClCX,QAAQC,IAAIa,GADsB,WAAAJ,EAAA,MAEbK,MAAMjB,EAAYgB,EAAU,kBAFf,cAE9BE,EAF8B,OAGlChB,QAAQC,IAAIe,GAHsB,WAAAN,EAAA,MAIVM,EAASnB,QAJC,cAI9BoB,EAJ8B,OAKlCjB,QAAQC,IAAIgB,GACZrB,EAAoBqB,EAAanB,EAAYgB,EAAU,KANrB,kBAO3BG,GAP2B,2CADtC,sCA/BOC,MAAK,SAACZ,GACLC,EAAYD,GACZG,EAAqB,iBAI3B,IAAIU,EAAgBb,EAAStB,KAAI,SAAC8B,EAAS5B,GAAV,OAC/B,kBAAC,IAAMkC,SAAP,CAAgBC,IAAKnC,GACnB,kBAACP,EAAYmC,GACb,kBAAC1B,EAAD,UAKJ,OACE,yBAAKd,UAAU,OACb,kBAACF,EAAD,KACG+C,KCvBWG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.03c57887.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../stylesheets/ListStyleSheet.css\";\r\n\r\n\r\nexport default function List({children}){\r\n    return <div className=\"list-container\">\r\n        {children}\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport \"../stylesheets/ContentStyleSheet.css\"\r\n\r\n\r\n\r\nexport default function Content({header, description, src}){\r\n    return <div className=\"content-container\">\r\n       {header? <h3 className=\"content-header\"> {header} </h3> : null}\r\n       {description? <p className=\"content-description\"> {description} </p> : null}\r\n       {src? <img className=\"content-img\" src={src}  /> : null}\r\n    </div>\r\n}","import React from 'react';\r\nimport Content from \"./Content\";\r\nimport \"../stylesheets/ProjectStyleSheet.css\";\r\n\r\n\r\nexport default function Project({ name, contents, description, gitHubLink }) {\r\n    var contentsComponents = null;\r\n    if (contents) {\r\n        contentsComponents = contents.map(\r\n            (content, index) => <Content {...content} ></Content>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"project-container\">\r\n            <a href={gitHubLink}>\r\n            <h2 className=\"project-header\"> {name}</h2>\r\n            </a>\r\n            <p className=\"project-description\"> {description}</p>\r\n            <div className=\"project-contents-list\">\r\n                {contentsComponents}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport default function Spacer(){\r\n    return <div style={{ \r\n    borderTop: 3, \r\n    width:\"85%\", \r\n    height: 5, \r\n    marginTop: 10, \r\n    borderTopColor: \"grey\", \r\n    borderTopStyle: \"solid\"}}></div>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport List from \"./components/List\";\r\nimport Project from \"./components/Project\";\r\nimport projectsFolderNames from \"./projects.json\";\r\nimport Spacer from './components/Spacer';\r\n\r\nfunction App() {\r\n  console.log(\"testy test\")\r\n  console.log({folderName :projectsFolderNames});\r\n  var [projects, setProjects] = useState([]);\r\n  var [retrievedProjects, setRetrievedProjects] = useState(\"Not Retrieved\");\r\n  console.log({ projects: projects, retrievedProjects: retrievedProjects });\r\n\r\n  if (retrievedProjects == \"Not Retrieved\") {\r\n    setRetrievedProjects(\"Retrieving\");\r\n    GetListOfProjects(projectsFolderNames, \"projects/\")\r\n      .then((projects) => {\r\n        setProjects(projects);\r\n        setRetrievedProjects(\"Retrieved\");\r\n      })\r\n  }\r\n\r\n  var projectsReact = projects.map((project, index) =>\r\n    <React.Fragment key={index}>\r\n      <Project {...project} />\r\n      <Spacer />\r\n    </React.Fragment>\r\n    );\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <List>\r\n        {projectsReact}\r\n\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction resolveProjectPaths(json, directory) {\r\n  json.contents = json.contents.map((content) => {\r\n    content.src = directory + content.src;\r\n    return content;\r\n  });\r\n}\r\n\r\nasync function GetListOfProjects(projectNames, directory) {\r\n  return Promise.all(projectNames.map(async (project) => {\r\n    console.log(project);\r\n    var response = await fetch(directory + project + \"/content.json\");\r\n    console.log(response);\r\n    var projectJson = await response.json();\r\n    console.log(projectJson);\r\n    resolveProjectPaths(projectJson, directory + project + \"/\");\r\n    return projectJson;\r\n  }));\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}